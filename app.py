# Este √© o conte√∫do para o arquivo app.py

import os
import google.generativeai as genai
import textwrap
from dotenv import load_dotenv
from flask import Flask, request, jsonify, render_template

# --- PARTE 1: CONFIGURA√á√ÉO INICIAL ---
load_dotenv()
api_key = os.getenv("GOOGLE_API_KEY")

if api_key:
    genai.configure(api_key=api_key)
    print("‚úÖ Chave de API configurada com sucesso!")
else:
    print("‚ö†Ô∏è Aten√ß√£o: Chave de API n√£o encontrada no arquivo .env.")

# --- Inicializa o servidor Flask ---
app = Flask(__name__, template_folder='.')

# ==============================================================================
# PARTE 2: A CLASSE 'AGENTE'
# ==============================================================================
class Agente:
    def __init__(self, nome: str, system_instruction: str, model_name: str = "gemini-1.5-flash"):
        self.nome = nome
        self.system_instruction = textwrap.dedent(system_instruction)
        self.model = genai.GenerativeModel(model_name=model_name, system_instruction=self.system_instruction)
        print(f"ü§ñ Agente '{self.nome}' contratado e pronto para o trabalho!")

    def executar(self, tarefa: str, contexto: str = None) -> str:
        print(f"‚è≥ Agente '{self.nome}' iniciando tarefa...")
        prompt = f"TAREFA: {tarefa}"
        if contexto:
            prompt = f"CONTEXTO PARA REALIZAR A TAREFA:\n---\n{contexto}\n---\n\n{prompt}"
        try:
            response = self.model.generate_content(prompt)
            print(f"‚úÖ Agente '{self.nome}' concluiu a tarefa!")
            return response.text
        except Exception as e:
            print(f"‚ùå Erro ao executar o agente '{self.nome}': {e}")
            return f"Erro: N√£o foi poss√≠vel completar a tarefa. Motivo: {e}"

# ==============================================================================
# PARTE 3: A F√ÅBRICA DE AGENTES
# ==============================================================================
print("\n" + "="*80 + "\nINICIANDO A F√ÅBRICA DE AGENTES...\n" + "="*80)
meus_agentes = {
    "Analisador de Neg√≥cios": Agente(
        nome="Analisador de Neg√≥cios",
        system_instruction="""Voc√™ √© um analista de neg√≥cios s√™nior. Sua √∫nica fun√ß√£o √© receber uma URL e descrever em um par√°grafo conciso: 1. O modelo de neg√≥cio do site. 2. O p√∫blico-alvo principal. 3. O prop√≥sito central ou o problema que ele resolve. Sua resposta deve ser apenas este par√°grafo de an√°lise."""
    ),
    "Engenheiro de UI/UX": Agente(
        nome="Engenheiro de UI/UX",
        system_instruction="""Voc√™ √© um engenheiro de Front-end e especialista em UI/UX. Com base em um conceito de neg√≥cio (contexto), sua tarefa √© listar os 5 a 7 componentes de interface e funcionalidades essenciais que um usu√°rio veria e com os quais interagiria no site. Formate a resposta como uma lista de t√≥picos (bullet points)."""
    ),
    "Arquiteto de Back-End": Agente(
        nome="Arquiteto de Back-End",
        system_instruction="""Voc√™ √© um arquiteto de software especializado em Back-end. Com base em uma lista de funcionalidades de front-end (contexto), sua tarefa √© projetar os recursos de back-end necess√°rios. Descreva: 1. Os principais modelos de dados (tabelas de banco de dados). 2. Os 3 ou 4 endpoints de API mais importantes (ex: GET /users, POST /items). Seja t√©cnico e direto."""
    ),
    "Desenvolvedor de Conte√∫do Did√°tico": Agente(
        nome="Desenvolvedor de Conte√∫do Did√°tico",
        system_instruction="""Voc√™ √© um educador de programa√ß√£o. Sua fun√ß√£o √© receber especifica√ß√µes de front-end e back-end (contexto) e transform√°-las em um desafio de programa√ß√£o claro e estruturado. Organize a atividade em "Parte 1: Front-End" e "Parte 2: Back-End", detalhando as tarefas de forma l√≥gica para um aluno. Sua resposta deve ser o rascunho da atividade."""
    ),
    "Revisor Pedag√≥gico": Agente(
        nome="Revisor Pedag√≥gico",
        system_instruction="""Voc√™ √© um professor experiente com uma did√°tica impec√°vel. Sua tarefa √© receber um rascunho de uma atividade de programa√ß√£o (contexto) e aprimor√°-la. Seu trabalho √©: 1. Simplificar a linguagem para torn√°-la mais clara e motivadora. 2. Formatar o texto perfeitamente usando t√≠tulos, listas e negrito para f√°cil leitura. 3. Adicionar uma se√ß√£o "Conselho do Mestre" ao final de cada parte (Front-end e Back-end) com uma dica √∫til que n√£o entregue a resposta."""
    )
}
print("\n" + "="*80 + f"\nF√ÅBRICA CONCLU√çDA: {len(meus_agentes)} agentes contratados.\n" + "="*80)

# ==============================================================================
# PARTE 4: ROTA DA API QUE ORQUESTRA OS AGENTES
# ==============================================================================
@app.route('/gerar-atividade', methods=['POST'])
def orquestrar_agentes():
    data = request.get_json()
    tarefa_inicial = data.get('url')
    if not tarefa_inicial:
        return jsonify({"erro": "URL n√£o fornecida"}), 400
    print(f"\nüöÄ Orquestra√ß√£o iniciada para a URL: {tarefa_inicial}")
    try:
        contexto_conceito = meus_agentes["Analisador de Neg√≥cios"].executar(tarefa=f"Analise a URL: {tarefa_inicial}")
        contexto_frontend = meus_agentes["Engenheiro de UI/UX"].executar(tarefa="Liste os componentes de UI/UX.", contexto=contexto_conceito)
        contexto_backend = meus_agentes["Arquiteto de Back-End"].executar(tarefa="Projete a API e os modelos de dados.", contexto=contexto_frontend)
        contexto_para_desafio = f"Especifica√ß√µes de Front-End:\n{contexto_frontend}\n\nEspecifica√ß√µes de Back-End:\n{contexto_backend}"
        contexto_rascunho = meus_agentes["Desenvolvedor de Conte√∫do Did√°tico"].executar(tarefa="Crie o desafio de programa√ß√£o.", contexto=contexto_para_desafio)
        atividade_final = meus_agentes["Revisor Pedag√≥gico"].executar(tarefa="Revise e formate esta atividade.", contexto=contexto_rascunho)
        print("‚úÖ Orquestra√ß√£o conclu√≠da com sucesso!")
        return jsonify({"resultado": atividade_final})
    except Exception as e:
        print(f"‚ùå Erro fatal durante a orquestra√ß√£o: {e}")
        return jsonify({"erro": str(e)}), 500

# ==============================================================================
# PARTE 5: ROTA PRINCIPAL QUE SERVE A P√ÅGINA WEB
# ==============================================================================
@app.route('/')
def index():
    return render_template('static/index.html')

if __name__ == "__main__":
    app.run(host='0.0.0.0', port=5000, debug=True)