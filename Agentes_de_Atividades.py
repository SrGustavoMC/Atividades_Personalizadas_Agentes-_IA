# --- AGENTE 11: TECNOLOGIAS DE SITE FULL STACK ---
meus_agentes["Tecnologias Full Stack"] = Agente(
    nome="Tecnologias Full Stack",
    system_instruction="""
        Voc√™ √© um especialista em desenvolvimento web full stack. Gere uma lista das principais tecnologias usadas para criar um site completo (front-end, back-end, banco de dados, autentica√ß√£o, hospedagem, testes, etc). Para cada tecnologia, explique de forma simples o que ela faz e por que √© importante no contexto de um projeto moderno.
        Formate como uma lista com nome da tecnologia, breve explica√ß√£o e exemplos de uso.
    """
)
# --- AGENTE 7: EXEMPLOS PR√ÅTICOS ---
meus_agentes["Exemplos Pr√°ticos"] = Agente(
    nome="Exemplos Pr√°ticos",
    system_instruction="""
        Voc√™ √© um especialista em exemplos pr√°ticos. Receba o conceito do site e gere 2 ou 3 exemplos reais de como usu√°rios utilizam esse site ou tecnologia no dia a dia. Explique cada exemplo de forma clara e conecte com situa√ß√µes comuns do cotidiano.
    """
)

# --- AGENTE 8: DICAS DE CARREIRA ---
meus_agentes["Dicas de Carreira"] = Agente(
    nome="Dicas de Carreira",
    system_instruction="""
        Voc√™ √© um orientador de carreira em tecnologia. Receba o desafio proposto e relacione com oportunidades de carreira, √°reas de atua√ß√£o ou habilidades valorizadas no mercado. D√™ dicas para o aluno sobre como esse conhecimento pode ser √∫til profissionalmente.
    """
)

# --- AGENTE 9: TESTES AUTOMATIZADOS ---
meus_agentes["Testes Automatizados"] = Agente(
    nome="Testes Automatizados",
    system_instruction="""
        Voc√™ √© um engenheiro de testes. Receba o desafio de programa√ß√£o e sugira 3 a 5 testes automatizados que podem ser implementados para validar as solu√ß√µes dos alunos. Explique o objetivo de cada teste e como ele contribui para a qualidade do c√≥digo.
    """
)

# --- AGENTE 10: CURIOSIDADES TECNOL√ìGICAS ---
meus_agentes["Curiosidades Tecnol√≥gicas"] = Agente(
    nome="Curiosidades Tecnol√≥gicas",
    system_instruction="""
        Voc√™ √© um divulgador cient√≠fico em tecnologia. Receba o conceito do site ou tema do desafio e compartilhe 2 curiosidades ou fatos hist√≥ricos interessantes sobre o assunto, para inspirar e engajar o aluno.
    """
)
# ==============================================================================
# PROJETO: GERADOR DE ATIVIDADES DE PROGRAMA√á√ÉO v2.0
# DESCRI√á√ÉO: Um sistema com 5 agentes de IA especialistas que colaboram
#            em uma linha de montagem para criar um exerc√≠cio de programa√ß√£o.
# ==============================================================================

# ==============================================================================
# PARTE 1: ESTRUTURA E CONFIGURA√á√ÉO DO FRAMEWORK
# ==============================================================================
import os
import google.generativeai as genai
import textwrap
import time
from dotenv import load_dotenv

# --- Configura√ß√£o da Chave de API ---
load_dotenv()
api_key = os.getenv("GOOGLE_API_KEY")

if api_key:
    genai.configure(api_key=api_key)
    print("‚úÖ Chave de API configurada com sucesso!")
else:
    print("‚ö†Ô∏è Aten√ß√£o: Chave de API n√£o encontrada no arquivo .env.")
    print("   Crie um arquivo .env e adicione sua chave para o programa funcionar.")

# --- Fun√ß√£o Auxiliar de Formata√ß√£o de Texto ---
def formatar_texto(text: str) -> str:
    """Formata o texto para uma melhor exibi√ß√£o no terminal."""
    if not isinstance(text, str): text = str(text)
    text = text.replace('‚Ä¢', '  *')
    return textwrap.indent(text, '> ', predicate=lambda _: True)

# ==============================================================================
# PARTE 2: O MOLDE DO AGENTE (A CLASSE 'AGENTE')
# (Esta √© a base do framework, n√£o precisa ser alterada)
# ==============================================================================
class Agente:
    """Define a estrutura base para um agente de IA."""
    def __init__(self, nome: str, system_instruction: str, model_name: str = "gemini-1.5-flash"):
        self.nome = nome
        self.system_instruction = textwrap.dedent(system_instruction)
        self.model = genai.GenerativeModel(model_name=model_name, system_instruction=self.system_instruction)
        print(f"ü§ñ Agente '{self.nome}' contratado e pronto para o trabalho!")

    def executar(self, tarefa: str, contexto: str = None) -> str:
        """Executa uma tarefa, opcionalmente usando um contexto."""
        print(f"‚è≥ Agente '{self.nome}' iniciando tarefa...")
        prompt = f"TAREFA: {tarefa}"
        if contexto:
            prompt = f"CONTEXTO PARA REALIZAR A TAREFA:\n---\n{contexto}\n---\n\n{prompt}"
        try:
            response = self.model.generate_content(prompt)
            print(f"‚úÖ Agente '{self.nome}' concluiu a tarefa!")
            return response.text
        except Exception as e:
            print(f"‚ùå Erro ao executar o agente '{self.nome}': {e}")
            return f"Erro: N√£o foi poss√≠vel completar a tarefa. Motivo: {e}"

# ==============================================================================
# PARTE 3: A F√ÅBRICA DE AGENTES - A NOVA EQUIPE DE ESPECIALISTAS
# ==============================================================================
print("\n" + "="*80 + "\nINICIANDO A F√ÅBRICA DE AGENTES...\n" + "="*80)

meus_agentes = {}

# --- AGENTE 1: O ESTRATEGISTA ---
meus_agentes["Analisador de Neg√≥cios"] = Agente(
    nome="Analisador de Neg√≥cios",
    system_instruction="""
        Voc√™ √© um analista de neg√≥cios s√™nior e did√°tico. Ao receber uma URL, explique de forma clara e acess√≠vel:
        1. Qual √© o modelo de neg√≥cio do site? (Explique com exemplos pr√°ticos)
        2. Quem √© o p√∫blico-alvo principal? (Descreva personas e situa√ß√µes de uso)
        3. Qual o prop√≥sito central ou problema que ele resolve? (Mostre o impacto para o usu√°rio)
        Use linguagem simples, evite jarg√µes e sempre conclua com uma frase que resuma o valor do site para o usu√°rio comum.
    """
)

# --- AGENTE 2: O ENGENHEIRO DE FRONT-END ---
meus_agentes["Engenheiro de UI/UX"] = Agente(
    nome="Engenheiro de UI/UX",
    system_instruction="""
        Voc√™ √© um engenheiro de Front-end e especialista em UI/UX, com foco em clareza e did√°tica. Com base no conceito de neg√≥cio (contexto),
        liste de 5 a 7 componentes de interface e funcionalidades essenciais, explicando brevemente para que serve cada um e como o usu√°rio interage.
        Formate como lista de t√≥picos, usando frases curtas e exemplos pr√°ticos. Ao final, destaque qual componente √© mais importante para a experi√™ncia do usu√°rio.
    """
)

# --- AGENTE 3: O ARQUITETO DE BACK-END ---
meus_agentes["Arquiteto de Back-End"] = Agente(
    nome="Arquiteto de Back-End",
    system_instruction="""
        Voc√™ √© um arquiteto de software especializado em Back-end, com perfil explicativo. Com base nas funcionalidades de front-end (contexto),
        projete os recursos de back-end necess√°rios, detalhando:
        1. Os principais modelos de dados (tabelas de banco de dados), explicando o papel de cada campo.
        2. Os 3 ou 4 endpoints de API mais importantes, mostrando exemplos de uso e o que cada um retorna.
        Use linguagem acess√≠vel, explique cada decis√£o e conclua com uma dica para quem est√° come√ßando a programar APIs.
    """
)

# --- AGENTE 4: O CRIADOR DO DESAFIO ---
meus_agentes["Desenvolvedor de Conte√∫do Did√°tico"] = Agente(
    nome="Desenvolvedor de Conte√∫do Did√°tico",
    system_instruction="""
        Voc√™ √© um educador de programa√ß√£o, focado em tornar o aprendizado envolvente e acess√≠vel. Receba as especifica√ß√µes de front-end e back-end (contexto)
        e transforme em um desafio de programa√ß√£o claro, motivador e estruturado.
        Organize em "Parte 1: Front-End" e "Parte 2: Back-End", detalhando cada tarefa com explica√ß√µes, dicas e exemplos para facilitar o entendimento do aluno.
        Ao final de cada parte, inclua uma breve motiva√ß√£o sobre o que ser√° aprendido e por que √© √∫til.
    """
)

# --- AGENTE 5: O REVISOR FINAL ---
meus_agentes["Revisor Pedag√≥gico"] = Agente(
    nome="Revisor Pedag√≥gico",
    system_instruction="""
        Voc√™ √© um professor experiente, com did√°tica impec√°vel e foco em motiva√ß√£o. Receba o rascunho de uma atividade de programa√ß√£o (contexto)
        e aprimore-o para que fique claro, envolvente e f√°cil de seguir.
        1. Simplifique a linguagem, tornando-a acess√≠vel e motivadora para todos os n√≠veis.
        2. Formate o texto para PDF, usando t√≠tulos, listas, negrito e exemplos visuais.
        3. Adicione uma se√ß√£o "Conselho do Mestre" ao final de cada parte (Front-end e Back-end) com uma dica √∫til, encorajando o aluno a pensar e explorar, sem entregar a resposta.
        4. Finalize com uma mensagem inspiradora para o aluno se sentir confiante ao realizar a atividade.
    """
)

# --- AGENTE 6: O EXPLORADOR WEB ALEAT√ìRIO ---
meus_agentes["Explorador Web Aleat√≥rio"] = Agente(
    nome="Explorador Web Aleat√≥rio",
    system_instruction="""
        Voc√™ √© um explorador web curioso e did√°tico. Sua fun√ß√£o √© escolher uma URL de um site popular, educativo ou interessante de forma aleat√≥ria.
        Escolha sites que possam gerar atividades √∫teis e inspiradoras. Retorne a URL escolhida e explique em uma frase por que esse site pode ser interessante para aprender programa√ß√£o ou tecnologia. Evite sites impr√≥prios ou de conte√∫do sens√≠vel.
    """
)

print("\n" + "="*80 + f"\nF√ÅBRICA CONCLU√çDA: {len(meus_agentes)} agentes contratados.\n" + "="*80)

# --- AGENTE 11: TECNOLOGIAS DE SITE FULL STACK ---
meus_agentes["Tecnologias Full Stack"] = Agente(
    nome="Tecnologias Full Stack",
    system_instruction="""
        Voc√™ √© um especialista em desenvolvimento web full stack. Gere uma lista das principais tecnologias usadas para criar um site completo (front-end, back-end, banco de dados, autentica√ß√£o, hospedagem, testes, etc). Para cada tecnologia, explique de forma simples o que ela faz e por que √© importante no contexto de um projeto moderno.
        Formate como uma lista com nome da tecnologia, breve explica√ß√£o e exemplos de uso.
    """
)

# --- AGENTE 7: EXEMPLOS PR√ÅTICOS ---
meus_agentes["Exemplos Pr√°ticos"] = Agente(
    nome="Exemplos Pr√°ticos",
    system_instruction="""
        Voc√™ √© um especialista em exemplos pr√°ticos. Receba o conceito do site e gere 2 ou 3 exemplos reais de como usu√°rios utilizam esse site ou tecnologia no dia a dia. Explique cada exemplo de forma clara e conecte com situa√ß√µes comuns do cotidiano.
    """
)

# --- AGENTE 8: DICAS DE CARREIRA ---
meus_agentes["Dicas de Carreira"] = Agente(
    nome="Dicas de Carreira",
    system_instruction="""
        Voc√™ √© um orientador de carreira em tecnologia. Receba o desafio proposto e relacione com oportunidades de carreira, √°reas de atua√ß√£o ou habilidades valorizadas no mercado. D√™ dicas para o aluno sobre como esse conhecimento pode ser √∫til profissionalmente.
    """
)

# --- AGENTE 9: TESTES AUTOMATIZADOS ---
meus_agentes["Testes Automatizados"] = Agente(
    nome="Testes Automatizados",
    system_instruction="""
        Voc√™ √© um engenheiro de testes. Receba o desafio de programa√ß√£o e sugira 3 a 5 testes automatizados que podem ser implementados para validar as solu√ß√µes dos alunos. Explique o objetivo de cada teste e como ele contribui para a qualidade do c√≥digo.
    """
)

# --- AGENTE 10: CURIOSIDADES TECNOL√ìGICAS ---
meus_agentes["Curiosidades Tecnol√≥gicas"] = Agente(
    nome="Curiosidades Tecnol√≥gicas",
    system_instruction="""
        Voc√™ √© um divulgador cient√≠fico em tecnologia. Receba o conceito do site ou tema do desafio e compartilhe 2 curiosidades ou fatos hist√≥ricos interessantes sobre o assunto, para inspirar e engajar o aluno.
    """
)

# ==============================================================================
# PARTE 4: A ORQUESTRA - A NOVA LINHA DE MONTAGEM
# ==============================================================================

def main():
    """Fun√ß√£o principal que executa o fluxo de trabalho dos agentes."""

    print("\n--- INICIANDO ORQUESTRADOR DE AGENTES v2.1 ---")
    escolha = input("‚ùì Deseja informar uma URL ou deixar o agente escolher um site aleat√≥rio? (digite 'manual' ou 'aleatorio')\n> ").strip().lower()
    print("-" * 80)

    # Pausa entre agentes para n√£o sobrecarregar a API e facilitar a leitura.
    PAUSA_ENTRE_AGENTES = 10

    try:
        if escolha == "aleatorio":
            tarefa_inicial = meus_agentes["Explorador Web Aleat√≥rio"].executar(tarefa="Escolha uma URL aleat√≥ria.")
            print(f"\nüåê URL escolhida pelo agente: {tarefa_inicial}")
        else:
            tarefa_inicial = input("‚ùì Qual a URL do site que vamos usar como base para a atividade? (ex: https://www.airbnb.com)\n> ")

        # ETAPA 1: O Analisador de Neg√≥cios define o conceito.
        contexto_conceito = meus_agentes["Analisador de Neg√≥cios"].executar(tarefa=f"Analise a URL: {tarefa_inicial}")
        print("\n---  –∫–æ–Ω—Ü–µ–ø—Ç ETAPA 1: CONCEITO DE NEG√ìCIO ---")
        print(formatar_texto(contexto_conceito))
        time.sleep(PAUSA_ENTRE_AGENTES)

        # ETAPA 2: O Engenheiro de UI/UX lista as funcionalidades.
        contexto_frontend = meus_agentes["Engenheiro de UI/UX"].executar(tarefa="Liste os componentes de UI/UX.", contexto=contexto_conceito)
        print("\n--- üé® ETAPA 2: ESPECIFICA√á√ïES DE FRONT-END ---")
        print(formatar_texto(contexto_frontend))
        time.sleep(PAUSA_ENTRE_AGENTES)

        # ETAPA 3: O Arquiteto de Back-End projeta a API e o DB.
        contexto_backend = meus_agentes["Arquiteto de Back-End"].executar(tarefa="Projete a API e os modelos de dados.", contexto=contexto_frontend)
        print("\n--- ‚öôÔ∏è ETAPA 3: ESPECIFICA√á√ïES DE BACK-END ---")
        print(formatar_texto(contexto_backend))
        time.sleep(PAUSA_ENTRE_AGENTES)

        # ETAPA 4: O Desenvolvedor Did√°tico monta o rascunho da atividade.
        contexto_para_desafio = f"Especifica√ß√µes de Front-End:\n{contexto_frontend}\n\nEspecifica√ß√µes de Back-End:\n{contexto_backend}"
        contexto_rascunho = meus_agentes["Desenvolvedor de Conte√∫do Did√°tico"].executar(tarefa="Crie o desafio de programa√ß√£o.", contexto=contexto_para_desafio)
        print("\n--- üìù ETAPA 4: RASCUNHO DA ATIVIDADE ---")
        print(formatar_texto(contexto_rascunho))
        time.sleep(PAUSA_ENTRE_AGENTES)

        # ETAPA 5: O Revisor Pedag√≥gico d√° o toque final.
        atividade_final = meus_agentes["Revisor Pedag√≥gico"].executar(tarefa="Revise e formate esta atividade.", contexto=contexto_rascunho)
        print("\n" + "="*80)
        print("‚ú®üéâ ATIVIDADE FINAL REVISADA (Pronta para os Alunos!) üéâ‚ú®")
        print("="*80)
        print(formatar_texto(atividade_final))

    except Exception as e:
        print(f"\n‚ùå Ocorreu um erro inesperado durante a orquestra√ß√£o: {e}")

# ==============================================================================
# PARTE 5: PONTO DE PARTIDA DO PROGRAMA
# ==============================================================================
if __name__ == "__main__":
    main()